using System.Collections.Immutable;
using System.Linq;
using System.Text;
using static System.Console;

namespace Assembly
{
    public class Запись
    {
        private string первоеСвойство = String.Empty;
        public string ПервоеСвойство
        {
            get => первоеСвойство; set => первоеСвойство = value;
        }
        private int второеСвойство = 0;
        public int ВтороеСвойство
        {
            get => второеСвойство; set => второеСвойство = value;
        }
    }

    public class Program
    {
        static void Main(string[] args)
        {
            // Поддержка кириллицы в консили:
            Console.OutputEncoding = Encoding.UTF8;

            // Функция для вывода в консоль:
            Action<string, int, bool> ПостроитьОтвет =
                (
                    string свойство,
                    int сумма,
                    bool естьСвойство
                )
                =>
                {
                    WriteLine
                    (
                        String.Join(" ", new string[]
                        {
                            "Сумма по спискуБ:",
                            свойство,
                            естьСвойство
                                ? сумма.ToString()
                                : "свойство не найдено в списке Б"
                        })
                    );
                };

            IEnumerable<Запись> списокА = new List<Запись>()
            {
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 73 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 184 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 24 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 91 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 2 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 354 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 199 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 13 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 101 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 72 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 4 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 88 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 724 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 45 },
                // если закомменарить петрушку, то она не будет выводиться в суммах:
                new Запись() { ПервоеСвойство = "петрушка", ВтороеСвойство = 2 },
            };

            // СписокБ меньше, чем списокА. В списке списокБ нет кабачка:
            // Значения второгоСвойства также отличаются от списка А:
            IEnumerable<Запись> списокБ = new List<Запись>()
            {
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 95 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 546 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 24 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 97 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 2 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 376 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 11 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 34 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 72 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 14 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 83 },
                new Запись() { ПервоеСвойство = "петрушка", ВтороеСвойство = 412 },
                new Запись() { ПервоеСвойство = "петрушка", ВтороеСвойство = 821 },
            };

            // ======================
            // СЛУЧАЙ №1
            // Мы обходим список А и на каждой итерации нам нужны
            // все объекты из списка Б с таким же первымСвойством.
            // Далее нам нужна сумма этих объектов по их второмуСвойству.

            // сделаем словарь по группам из списка Б:
            IDictionary<string, IGrouping<string, Запись>> словарьБ = списокБ
                .GroupBy(запись => запись.ПервоеСвойство)
                .ToImmutableDictionary(группа => группа.Key);

            // обойдем список А:
            foreach (Запись запись in списокА)
            {
                // если в списке Б есть объекты с первымСвойством из списка А,
                // то выводим сумму этих объектов по второмуСвойству:
                if (словарьБ.ContainsKey(запись.ПервоеСвойство))
                {
                    ПостроитьОтвет
                    (
                        запись.ПервоеСвойство,
                        словарьБ[запись.ПервоеСвойство]
                            .Sum(группа => группа.ВтороеСвойство),
                        true
                    );
                }
                // иначе выводим сообщение об отсутствии объекта
                // в списке Б с таким первымСвойством:
                else
                {
                    ПостроитьОтвет
                    (
                        запись.ПервоеСвойство,
                        0,
                        false
                    );
                }
            }

            // Вывод:
            // Сумма по спискуБ: капуста 554
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: тыква 110
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: капуста 554
            // Сумма по спискуБ: кабачок свойство не найдено в списке Б
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: тыква 110
            // Сумма по спискуБ: тыква 110
            // Сумма по спискуБ: капуста 554
            // Сумма по спискуБ: кабачок свойство не найдено в списке Б
            // Сумма по спискуБ: кабачок свойство не найдено в списке Б
            // Сумма по спискуБ: петрушка 1233

            WriteLine();

            // ======================
            // СЛУЧАЙ №2
            // Нам нужно нужно сравнить два списка: А и Б
            // и найти все общие объекты по их первомуСвойству.
            // Далее сгруппировать эти общие объекты по их первомуСвойству,
            // и вывести сумму по их второмуСвойству, 
            // взяв значения второгоСвойства из списка Б.

            // построим список общих объектов по первомуСвойству:
            IEnumerable<IGrouping<string, Запись>> группыОбщихОбъектов = списокБ
                // группируем список Б по первымСвойствам
                .GroupBy(запись => запись.ПервоеСвойство)
                // вычисляем общие объекты в списке А и списке ключей групп Б
                // по первомуСвойству
                .Where(группаБ => списокА
                    .Any(записьА => записьА.ПервоеСвойство == группаБ.Key));

            if (группыОбщихОбъектов.Count() != 0)
            {
                foreach (IGrouping<string, Запись> группаПересечения in группыОбщихОбъектов)
                {
                    ПостроитьОтвет
                    (
                        группаПересечения.Key,
                        группаПересечения
                            .Sum(группа => группа.ВтороеСвойство),
                        true
                    );
                }
            }

            // Вывод:
            // Сумма по спискуБ: капуста 554
            // Сумма по спискуБ: морковь 690
            // Сумма по спискуБ: тыква 110
            // Сумма по спискуБ: петрушка 1233

            // Для эксперимента попробуй убрать все объекты из списка А
            // с конкретным первымСвойством, например, закомментируй петрушку в списке А.
        }
    }
}
