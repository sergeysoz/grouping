using System.Text;
using static System.Console;

namespace Assembly
{
    public class Запись
    {
        private string первоеСвойство = String.Empty;
        public string ПервоеСвойство
        {
            get => первоеСвойство;
            set => первоеСвойство = value;
        }
        private int второеСвойство = 0;
        public int ВтороеСвойство
        {
            get => второеСвойство;
            set => второеСвойство = value;
        }
    }
    public class Program
    {
        static void Main(string[] args)
        {
            IEnumerable<Запись> списокА = new List<Запись>()
            {
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 73 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 184 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 24 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 91 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 2 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 354 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 199 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 13 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 101 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 72 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 4 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 88 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 724 },
                new Запись() { ПервоеСвойство = "кабачок", ВтороеСвойство = 45 },
            };

            // СписокБ меньше, чем списокА. В списке списокБ нет кабачка:
            // Значения Второго свойства также отличаются от списка А:
            IEnumerable<Запись> списокБ = new List<Запись>()
            {
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 95 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 546 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 24 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 97 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 2 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 376 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 11 },
                new Запись() { ПервоеСвойство = "морковь", ВтороеСвойство = 34 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 72 },
                new Запись() { ПервоеСвойство = "тыква", ВтороеСвойство = 14 },
                new Запись() { ПервоеСвойство = "капуста", ВтороеСвойство = 83 },
            };
          
            // Сначала сгруппируем списокБ по первомуСвойству:
            // Первый тип у IGrouping - это тип ключа (в данном случае string)
            IEnumerable<IGrouping<string, Запись>> группыБ = списокБ
                .GroupBy(запись => запись.ПервоеСвойство);

            // Теперь создадим словарь из групп, образованных из спискаБ:
            // Ключами для словаря станут ключи групп:
            IDictionary<string, IGrouping<string, Запись>> словарьБ = группыБ
                .ToDictionary(группа => группа.Key);

            foreach 
            (
                string первоеСвойство in группыБ
                    .Select(x => x.Key)
                    .Intersect(списокА.Select(элемент => элемент.ПервоеСвойство))
            )
            {
                // Затем также выводим сумму:
                WriteLine
                (
                    String.Join(" ", new string[]
                    {
                        "Сумма по спискуБ:",
                        первоеСвойство,
                        словарьБ[первоеСвойство]
                            .Sum(x => x.ВтороеСвойство)
                            .ToString()
                    })
                );
            }
        }
    }
}
